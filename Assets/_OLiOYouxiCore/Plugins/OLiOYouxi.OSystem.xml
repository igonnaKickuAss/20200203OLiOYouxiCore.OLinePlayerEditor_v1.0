<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OLiOYouxi.OSystem</name>
    </assembly>
    <members>
        <member name="T:OLiOYouxi.OSystem.CameraFather">
            <summary>
            摄像机柔和的对准角色
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.CameraFather.LerpRate">
            <summary>
            差值范围
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.CameraFather.Player">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.CameraFather.AreaMap">
            <summary>
            地图区域
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.CameraFather.AreaCameraSight">
            <summary>
            摄像机视野区域
            </summary>
        </member>
        <member name="M:OLiOYouxi.OSystem.CameraFather.Awake">
            <summary>
            在Awake中调用
            </summary>
        </member>
        <member name="M:OLiOYouxi.OSystem.CameraFather.LateUpdate">
            <summary>
            在LateUpdate中调用
            </summary>
        </member>
        <member name="M:OLiOYouxi.OSystem.CameraFather.FixedUpdate">
            <summary>
            在FixedUpdate中调用
            </summary>
        </member>
        <member name="T:OLiOYouxi.OSystem.DebugFather">
            <summary>
            记录红黄绿讯息
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.DebugFather.Log">
            <summary>
            记录绿色讯息
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.DebugFather.LogWarn">
            <summary>
            记录黄色讯息
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.DebugFather.LogErr">
            <summary>
            记录红色讯息
            </summary>
        </member>
        <member name="T:OLiOYouxi.OSystem.CoroutineFather">
            <summary>
            执行延迟且重复数次的任务
            </summary>
        </member>
        <member name="M:OLiOYouxi.OSystem.CoroutineFather.Awake``1(``0)">
            <summary>
            在Awake中调用
            </summary>
            <typeparam name="T">继承MonoBehaviour的对象的类型</typeparam>
            <param name="origin">对象</param>
        </member>
        <member name="M:OLiOYouxi.OSystem.CoroutineFather.StartCoroutine(System.Action,System.Single,System.Int32)">
            <summary>
            执行一个可延迟可重复的任务
            </summary>
            <param name="action">任务</param>
            <param name="delay">延迟</param>
            <param name="repeat">重复次数</param>
            <returns>int</returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.CoroutineFather.StopCoroutine(System.Int32)">
            <summary>
            根据令牌停止指定的任务
            </summary>
            <param name="token">令牌</param>
        </member>
        <member name="M:OLiOYouxi.OSystem.CoroutineFather.ContinueCoroutine(System.Int32)">
            <summary>
            根据令牌继续指定的任务
            </summary>
            <param name="token">令牌</param>
        </member>
        <member name="M:OLiOYouxi.OSystem.CoroutineFather.CancelCoroutine(System.Int32)">
            <summary>
            根据令牌取消指定的任务
            </summary>
            <param name="token">令牌</param>
        </member>
        <member name="T:OLiOYouxi.OSystem.OList`1">
            <summary>
            不会产生GC的集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OLiOYouxi.OSystem.OList`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index">索引</param>
            <returns>T</returns>
        </member>
        <member name="P:OLiOYouxi.OSystem.OList`1.Capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:OLiOYouxi.OSystem.OList`1.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.#ctor(System.Int32)">
            <summary>
            不会产生GC的集合
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.#ctor(`0[])">
            <summary>
            不会产生GC的集合
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.Add(`0)">
            <summary>
            末尾添加一个元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.AddRange(`0[])">
            <summary>
            末尾添加多个元素
            </summary>
            <param name="items">多个元素</param>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.Remove(`0)">
            <summary>
            移除指定元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.RemoveAt(System.Int32)">
            <summary>
            移除指定位置的元素
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.Clear">
            <summary>
            清理集合
            </summary>
        </member>
        <member name="M:OLiOYouxi.OSystem.OList`1.GetEnumerator">
            <summary>
            获得枚举数
            </summary>
            <returns>枚举数</returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.IOUtility.GetPersistentDataPath">
            <summary>
            返回文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.IOUtility.WriteToFile(System.String,System.String)">
            <summary>
            进行数据写入文件
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
        </member>
        <member name="M:OLiOYouxi.OSystem.IOUtility.ReadToFile(System.String)">
            <summary>
            返回读取的文件数据
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.IOUtility.GetPathRelativeToProjectFolder(System.String)">
            <summary>
            返回文件在项目里的相对路径（..\\Assets\..\..）
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.MathUtility.Normalized(System.Single,UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
            <summary>
            将指定区间的某个值映射到另一个指定区间
            </summary>
            <param name="value">值</param>
            <param name="prevRange">前区间</param>
            <param name="nextRange">后区间</param>
            <returns>float</returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.PropertyUtility.GetAttribute``1(UnityEditor.SerializedProperty)">
            <summary>
            返回这个序列化属性的第一个特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.PropertyUtility.GetAttributes``1(UnityEditor.SerializedProperty)">
            <summary>
            返回这个序列化属性的所有特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.PropertyUtility.GetTargetObject(UnityEditor.SerializedProperty)">
            <summary>
            返回这个序列化属性的对象（property.serializedObject.targetObject）
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.ReflectionUtility.GetAllFields(System.Object,System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            返回所有“字段”讯息，利用反射原理，使用linq操作(我把他叫做惰性遍历)，以给定的条件来返回所需要的 fieldInfos
            </summary>
            <param name="target"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.ReflectionUtility.GetAllProperties(System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            返回所有“属性”讯息，利用反射原理，使用linq操作(我把他叫做惰性遍历)，以给定的条件来返回所需要的 propertyInfos
            </summary>
            <param name="target"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.ReflectionUtility.GetAllMethods(System.Object,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            返回所有“函数（方法）”讯息，利用反射原理，使用linq操作（这是直接返回序列），以给定的条件来返回所需要的 methodInfos
            </summary>
            <param name="target"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.ReflectionUtility.GetField(System.Object,System.String)">
            <summary>
            返回指定的“字段”讯息， 传递 约束条件给方法 GetAllFields
            </summary>
            <param name="target"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.ReflectionUtility.GetProperty(System.Object,System.String)">
            <summary>
            返回指定的“属性”讯息， 传递 约束条件给方法 GetAllProperties
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:OLiOYouxi.OSystem.ReflectionUtility.GetMethod(System.Object,System.String)">
            <summary>
            返回指定的“方法”讯息， 传递 约束条件给方法 GetAllMethods
            </summary>
            <param name="target"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
